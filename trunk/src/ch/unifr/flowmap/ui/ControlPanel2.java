package ch.unifr.flowmap.ui;

import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.CellConstraints;

import javax.swing.*;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import java.awt.*;

import ch.unifr.flowmap.data.Stats;

public class ControlPanel2 {
    private JTabbedPane tabbedPane1;
    private JPanel panel1;
    private JCheckBox useLogColorScaleCheckbox;
    private JSlider maxEdgeWidthSlider;
    private JSpinner maxEdgeWidthSpinner;
    private JSlider edgeOpacitySlider;
    private JSpinner edgeOpacitySpinner;
    private JSpinner minValueFilterSpinner;
    private JSlider minLengthFilterSlider;
    private JSpinner minLengthFilterSpinner;
    private JSlider maxValueFilterSlider;
    private JSpinner maxValueFilterSpinner;
    private JCheckBox autoAdjustColorScaleCheckBox;
    private JSlider maxLengthFilterSlider;
    private JSpinner maxLengthFilterSpinner;
    private JSlider minValueFilterSlider;
    private JCheckBox useLogWidthScaleCheckbox;
    private FlowMapCanvas canvas;

    public ControlPanel2(FlowMapCanvas canvas) {
        this.canvas = canvas;
        setData(canvas.getModel());

        Stats stats = canvas.getGraphStats().getValueEdgeAttrStats();
        minValueFilterSpinner.setModel(
                new SpinnerNumberModel(
                        getModel().getValueFilterMin(), stats.min, stats.max, 1)
        );
        maxValueFilterSpinner.setModel(
                new SpinnerNumberModel(
                        getModel().getValueFilterMax(), stats.min, stats.max, 1)
        );

        minValueFilterSpinner.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                minValueFilterSlider.setValue((int) Math.round(Math.log((Double) minValueFilterSpinner.getValue())));
            }
        });
        minValueFilterSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                double value = fromLogValueFilter(minValueFilterSlider.getValue());
                getModel().setValueFilterMin(value);
                minValueFilterSpinner.setValue(value);
            }
        });
    }

    public FlowMapModel getModel() {
        return canvas.getModel();
    }

    private double fromLogValueFilter(final int v) {
        double value = Math.round(Math.pow(Math.E, v));
        final Stats stats = canvas.getGraphStats().getValueEdgeAttrStats();
        if (value < stats.min) {
            value = stats.min;
        }
        if (value > stats.max) {
            value = stats.max;
        }
        return value;
    }

    public JPanel getPanel() {
        return panel1;
    }

    public void setData(FlowMapModel data) {
        autoAdjustColorScaleCheckBox.setSelected(data.getAutoAdjustColorScale());
        useLogWidthScaleCheckbox.setSelected(data.isUseLogWidthScale());
        useLogColorScaleCheckbox.setSelected(data.isUseLogColorScale());
        minLengthFilterSlider.setValue((int) Math.round(data.getLengthFilterMin()));
        maxLengthFilterSlider.setValue((int) Math.round(data.getLengthFilterMax()));
        minLengthFilterSpinner.setValue(data.getLengthFilterMin());
        maxLengthFilterSpinner.setValue(data.getLengthFilterMax());
        minValueFilterSlider.setValue((int) Math.round(data.getValueFilterMin()));
        maxValueFilterSlider.setValue((int) Math.round(data.getValueFilterMax()));
        minValueFilterSpinner.setValue(data.getValueFilterMin());
        maxValueFilterSpinner.setValue(data.getValueFilterMax());
    }

    public void getData(FlowMapModel data) {
        data.setAutoAdjustColorScale(autoAdjustColorScaleCheckBox.isSelected());
        data.setUseLogWidthScale(useLogWidthScaleCheckbox.isSelected());
        data.setUseLogColorScale(useLogColorScaleCheckbox.isSelected());
        data.setLengthFilterMin((Double) minLengthFilterSpinner.getValue());
        data.setLengthFilterMax((Double) maxLengthFilterSpinner.getValue());
    }

    public boolean isModified(FlowMapModel data) {
        if (autoAdjustColorScaleCheckBox.isSelected() != data.getAutoAdjustColorScale()) return true;
        if (useLogWidthScaleCheckbox.isSelected() != data.isUseLogWidthScale()) return true;
        if (useLogColorScaleCheckbox.isSelected() != data.isUseLogColorScale()) return true;
        return false;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        tabbedPane1 = new JTabbedPane();
        panel1.add(tabbedPane1, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FormLayout("right:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow(2.0),left:4dlu:noGrow,fill:92px:noGrow,left:4dlu:noGrow,fill:23px:noGrow,left:4dlu:noGrow,right:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:50px:noGrow", "center:26px:noGrow,top:4dlu:noGrow,center:24px:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:5dlu:noGrow,center:d:noGrow"));
        tabbedPane1.addTab("Filter", panel2);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10), null));
        minValueFilterSpinner = new JSpinner();
        CellConstraints cc = new CellConstraints();
        panel2.add(minValueFilterSpinner, cc.xy(5, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JSeparator separator1 = new JSeparator();
        separator1.setOrientation(1);
        panel2.add(separator1, cc.xywh(7, 1, 1, 8, CellConstraints.CENTER, CellConstraints.FILL));
        final JLabel label1 = new JLabel();
        label1.setText("Min length:");
        panel2.add(label1, cc.xy(9, 1));
        minLengthFilterSlider = new JSlider();
        panel2.add(minLengthFilterSlider, cc.xy(11, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        minLengthFilterSpinner = new JSpinner();
        panel2.add(minLengthFilterSpinner, cc.xy(13, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label2 = new JLabel();
        label2.setText("Max value:");
        panel2.add(label2, cc.xy(1, 3));
        maxValueFilterSlider = new JSlider();
        panel2.add(maxValueFilterSlider, cc.xy(3, 3, CellConstraints.FILL, CellConstraints.CENTER));
        maxValueFilterSpinner = new JSpinner();
        panel2.add(maxValueFilterSpinner, cc.xy(5, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        autoAdjustColorScaleCheckBox = new JCheckBox();
        autoAdjustColorScaleCheckBox.setText("Auto adjust color scale");
        panel2.add(autoAdjustColorScaleCheckBox, cc.xyw(3, 5, 3));
        final JLabel label3 = new JLabel();
        label3.setText("Max length:");
        panel2.add(label3, cc.xy(9, 3));
        maxLengthFilterSlider = new JSlider();
        panel2.add(maxLengthFilterSlider, cc.xy(11, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        maxLengthFilterSpinner = new JSpinner();
        panel2.add(maxLengthFilterSpinner, cc.xy(13, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FormLayout("fill:d:grow", "center:d:grow"));
        panel2.add(panel3, cc.xy(5, 9));
        final JLabel label4 = new JLabel();
        label4.setText("Min value:");
        panel2.add(label4, cc.xy(1, 1));
        minValueFilterSlider = new JSlider();
        panel2.add(minValueFilterSlider, cc.xy(3, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new FormLayout("fill:d:noGrow,left:92dlu:noGrow,fill:d:noGrow,left:11dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:53px:noGrow", "center:max(d;4px):noGrow,top:4dlu:noGrow,center:24px:noGrow,top:4dlu:noGrow,center:23px:noGrow,top:4dlu:noGrow"));
        tabbedPane1.addTab("Scales", panel4);
        panel4.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10), null));
        maxEdgeWidthSlider = new JSlider();
        maxEdgeWidthSlider.setPaintLabels(false);
        maxEdgeWidthSlider.setPaintTicks(false);
        maxEdgeWidthSlider.setPaintTrack(true);
        panel4.add(maxEdgeWidthSlider, cc.xy(7, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label5 = new JLabel();
        label5.setText("Max edge width:");
        panel4.add(label5, cc.xy(5, 1));
        maxEdgeWidthSpinner = new JSpinner();
        panel4.add(maxEdgeWidthSpinner, cc.xy(9, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label6 = new JLabel();
        label6.setText("Edge opacity:");
        panel4.add(label6, cc.xy(5, 3));
        final JLabel label7 = new JLabel();
        label7.setText("Edge marker opacity:");
        panel4.add(label7, cc.xy(5, 5));
        edgeOpacitySlider = new JSlider();
        panel4.add(edgeOpacitySlider, cc.xy(7, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JSlider slider1 = new JSlider();
        panel4.add(slider1, cc.xy(7, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
        edgeOpacitySpinner = new JSpinner();
        panel4.add(edgeOpacitySpinner, cc.xy(9, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JSpinner spinner1 = new JSpinner();
        panel4.add(spinner1, cc.xy(9, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JSeparator separator2 = new JSeparator();
        separator2.setOrientation(1);
        panel4.add(separator2, cc.xywh(3, 1, 1, 6, CellConstraints.CENTER, CellConstraints.FILL));
        useLogWidthScaleCheckbox = new JCheckBox();
        useLogWidthScaleCheckbox.setText("Use log width scale");
        panel4.add(useLogWidthScaleCheckbox, cc.xy(2, 1));
        useLogColorScaleCheckbox = new JCheckBox();
        useLogColorScaleCheckbox.setText("Use log color scale");
        panel4.add(useLogColorScaleCheckbox, cc.xyw(1, 3, 2));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
